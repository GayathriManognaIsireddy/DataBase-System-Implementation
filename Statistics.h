#ifndef STATISTICS_H
#define STATISTICS_H

#include<bits/stdc++.h> 
#include "ParseTree.h"
#include "RelationsHead.h"

class Statistics
{
public:
	Statistics();
	Statistics(Statistics &copyMe);	 // Performs deep copy
	~Statistics();
	map<string, string> tablesMap;

	void AddRel(char *relName, int numTuples);
	void AddAtt(char *relName, char *attName, int numDistincts);
	void CopyRel(char *oldName, char *newName);
	
	void Read(char *fromWhere);
	void Write(char *fromWhere);

	void  Apply(struct AndList *parseTree, char *relNames[], int numToJoin);
	double Estimate(struct AndList *parseTree, char **relNames, int numToJoin);

	void initializeTableMap(){
		tablesMap["n"] = "nation";
  		tablesMap["r"] = "region";
		tablesMap["c"] = "customer";
  		tablesMap["p"] = "part";
		tablesMap["ps"] = "partsupp";
  		tablesMap["s"] = "supplier";
  		tablesMap["o"] = "orders";
  		tablesMap["l"] = "lineitem";
	}

private:

	// Map to store the relation along with its attributes, where relation name as key and the relationInfo object of the relation as value.
	map<string, RelationInfo> relationMap;

	// List of all the relation union objects
	vector<RelationsUnionInfo> relationsInfoVector;
	// Map to store the relation and the relations union poll it belongs to, with relation name as key and relationsunion info object as value. 
	map<string, RelationsUnionInfo> relationsInfoMap;

	// Method to parse the given parseTree(andList) and respond with an estimate tuples value caliculated from the relation generated by attributes in the tree
	double getParseTreeEstimation(struct AndList *parseTree);
	// Compares the primary relationsInfoVectore with all the relation unions formed by given relations and finaly calles the compareEstimate function on sucessful comparison of all the relations 
	double compareRelationsInfo(RelationsUnionInfo set, vector<int> &indices, struct AndList *parseTree, double joinEstimate);
	// Mathos to calucilate the final estimate value
	double compareEstimate(struct AndList *parseTree, double numOfTuples);
	
};

#endif
